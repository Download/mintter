// https://www.christopherbiscardi.com/post/using-netlify-identity-with-aws-lambda-custom-authorizers/

{
  "title": "Using Netlify Identity with AWS Lambda Custom Authorizers",
  "description": "",
  "metadata": {
    "author": "AUTHOR_PUBLIC_KEY",
    "tags": ["netlify identity", "tutorial", "aws lambda"],
    "timestamp": 3098765432
  },
  "children": [
    {
      "hash": "",
      "type": "text",
      "timestamp": 3098765432,
      "metadata": {
        "title": "",
        "description": "",
        "tags": ["netlify identity", "tutorial", "aws lambda"],
        "author": "AUTHOR_PUBLIC_KEY"
      },
      "children": [
        {
          "type": "emphasize",
          "children": [
            {
              "text": "If you prefer video, "
            },
            {
              "type": "link",
              "url": "https://egghead.io/lessons/aws-writing-an-aws-custom-authorizer-to-enable-the-use-of-netlify-identity-on-aws-lambda?pl=converting-a-serverless-app-to-run-on-aws-lambda-and-dynamodb-with-serverless-framework-223a?af=7h4hd0",
              "children": [
                {
                  "text": "there's one here"
                }
              ]
            },
            {
              "text": " along with several other videos on working with Netlify and AWS Lambda."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "link",
              "url": "https://docs.netlify.com/visitor-access/identity/",
              "children": [
                {
                  "text": "Netlify Identity",
                  "bold": true
                }
              ]
            },
            {
              "text": " is an integrated authorization solution for Netlify that allows users to sign up, log in, and also provides the verified user object inside of Netlify Functions."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Sometimes we’ll need to use Netlify Identity on other platforms, like AWS. This is the case if we need websocket support or want to take advantage of AWS IAM. In these cases we can still use Netlify Identity as our source of truth as our application scales up by taking advantage of custom authorizers."
            }
          ]
        }
      ]
    },
    {
      "hash": "",
      "type": "text",
      "timestamp": 3098765432,
      "metadata": {
        "title": "What's an authorizer?",
        "description": "",
        "tags": ["netlify identity", "tutorial", "aws lambda"],
        "author": "AUTHOR_PUBLIC_KEY"
      },
      "children": [
        {
          "type": "heading-two",
          "children": [
            {
              "text": "What's an authorizer?"
            }
          ]
        },
        {
          "type": "emphasize",
          "children": [
            {
              "text": "A Lambda authorizer (formerly known as a custom authorizer) is an API Gateway feature that uses a Lambda function to control access to your API. "
            },
            {
              "type": "link",
              "url": "https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html",
              "children": [
                {
                  "text": "aws docs"
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "There are two types of authorizers: token based and request parameter based. We are going to use a token authorizer in this post, but you’ll need a request parameter authorizer if you’re using websockets."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Let’s say we have a GraphQL API running on AWS Lambda. An authorizer sits in front of our GraphQL API, checks the bearer token for us, then returns an IAM policy indicating whether or not the request should be handled by the GraphQL server, or denied. AWS then evaluates the policy and either forwards the request to the GraphQL server, or doesn’t."
            }
          ]
        }
      ]
    },
    {
      "hash": "",
      "type": "text",
      "timestamp": 3098765432,
      "metadata": {
        "title": "Implementation",
        "description": "",
        "tags": ["netlify identity", "tutorial", "aws lambda"],
        "author": "AUTHOR_PUBLIC_KEY"
      },
      "children": [
        {
          "type": "heading-two",
          "children": [
            {
              "text": "Implementation"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "If you play around with an existing Netlify identity instance and "
            },
            {
              "type": "link",
              "url": "https://gotruejs-playground.netlify.com/",
              "children": [
                {
                  "text": "the GoTrue Playground",
                  "bold": true
                }
              ]
            },
            {
              "text": ", what you end up realizing is that to get the user data is a single HTTP call. This makes our authorizer implementation very small."
            }
          ]
        },
        {
          "type": "bullet-list",
          "children": [
            {
              "type": "list-item",
              "children": [
                {
                  "text": "Get the token"
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "text": "Get the user"
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "text": "If the user isn’t valid, throw"
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "text": "If the user is valid, return the policy"
                }
              ]
            }
          ]
        },
        {
          "type": "codeblock",
          "metadata": {
            "language": "JavaScript"
          },
          "children": [
            {
              "text": "module.exports = async params => { const token = getToken(params); const user = await getJSON( 'https://serverless-todo-netlify-fauna-egghead.netlify.com/.netlify/identity/user', null, { Authorization: `Bearer ${token}` } ); if (!user.id) { throw new Error('Netlify Identity Failed'); } return { principalId: user.id, policyDocument: getPolicyDocument( 'Allow', params.methodArn ) }; };"
            }
          ]
        }
      ]
    },
    {
      "hash": "",
      "type": "text",
      "timestamp": 3098765432,
      "metadata": {
        "title": "Getting the bearer token",
        "description": "",
        "tags": ["netlify identity", "tutorial", "aws lambda"],
        "author": "AUTHOR_PUBLIC_KEY"
      },
      "children": [
        {
          "type": "heading-two",
          "children": [
            {
              "text": "Getting the bearer token"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "As long as the token is sent in the Authorization header as a bearer token:"
            },
            {
              "type": "code",
              "language": "JavaScript",
              "children": [
                {
                  "text": "Authorization: Bearer my-token"
                }
              ]
            },
            {
              "text": ", when getting the token string from the params is fairly mechanical."
            }
          ]
        },
        {
          "type": "codeblock",
          "metadata": {
            "language": "JavaScript"
          },
          "children": [
            {
              "text": "const getToken = params => { if (!params.type || params.type !== 'TOKEN') { throw new Error( 'Expected 'event.type' parameter to have value 'TOKEN'' ); } const tokenString = params.authorizationToken; if (!tokenString) { throw new Error( 'Expected 'event.authorizationToken' parameter to be set' ); } const match = tokenString.match(/^Bearer (.*)$/); if (!match || match.length < 2) { throw new Error( `Invalid Authorization token - ${tokenString} does not match 'Bearer .*'` ); } return match[1]; };"
            }
          ]
        }
      ]
    },
    {
      "hash": "",
      "type": "text",
      "timestamp": 3098765432,
      "metadata": {
        "title": "Policies",
        "description": "",
        "tags": ["netlify identity", "tutorial", "aws lambda"],
        "author": "AUTHOR_PUBLIC_KEY"
      },
      "children": [
        {
          "type": "heading-two",
          "children": [
            {
              "text": "Policies"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "We use the "
            },
            {
              "type": "code",
              "language": "",
              "chilren": [
                {
                  "text": "2012-10-17"
                }
              ]
            },
            {
              "type": "link",
              "url": "https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_version.html",
              "children": [
                {
                  "text": "IAM policy version"
                }
              ]
            },
            {
              "text": " to say that the user is allowed to invoke an effect on a specific resource. In our case above, we decided to "
            },
            {
              "type": "code",
              "language": "",
              "children": [
                {
                  "text": "Allow"
                }
              ]
            },
            {
              "text": " invoking the next lambda: "
            },
            {
              "type": "code",
              "language": "",
              "children": [
                {
                  "text": "getPolicyDocument('Allow', params.methodArn)"
                }
              ]
            },
            {
              "text": "."
            }
          ]
        },
        {
          "type": "codeblock",
          "metadata": {
            "language": "JavaScript"
          },
          "children": [
            {
              "text": "const getPolicyDocument = (effect, resource) => { const policyDocument = { Version: '2012-10-17', // default version Statement: [ { Action: 'execute-api:Invoke', // default action Effect: effect, Resource: resource } ] }; return policyDocument; };"
            }
          ]
        }
      ]
    },
    {
      "hash": "",
      "type": "text",
      "timestamp": 3098765432,
      "metadata": {
        "title": "Bent",
        "description": "",
        "tags": ["netlify identity", "tutorial", "aws lambda"],
        "author": "AUTHOR_PUBLIC_KEY"
      },
      "children": [
        {
          "type": "heading-two",
          "children": [
            {
              "text": "Bent"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Perhaps less interesting, I want to call out the use of "
            },
            {
              "type": "link",
              "url": "https://github.com/mikeal/bent",
              "children": [
                {
                  "text": "Bent"
                }
              ]
            },
            {
              "text": " in this example, which has been fantastic to use."
            }
          ]
        },
        {
          "type": "codeblock",
          "metadata": {
            "language": "JavaScript"
          },
          "children": [
            {
              "text": "const bent = require('bent'); const getJSON = bent('GET', 'json'); const user = await getJSON( 'https://serverless-todo-netlify-fauna-egghead.netlify.com/.netlify/identity/user', null, { Authorization: `Bearer ${token}` } );"
            }
          ]
        }
      ]
    },
    {
      "hash": "",
      "type": "text",
      "timestamp": 3098765432,
      "metadata": {
        "title": "Thanks",
        "description": "",
        "tags": ["netlify identity", "tutorial", "aws lambda"],
        "author": "AUTHOR_PUBLIC_KEY"
      },
      "children": [
        {
          "type": "heading-two",
          "children": [
            {
              "text": "Thanks"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Special thanks to "
            },
            {
              "type": "link",
              "url": "https://twitter.com/DavidWells",
              "children": [
                {
                  "text": "David Wells"
                }
              ]
            },
            {
              "text": ", whose "
            },
            {
              "type": "link",
              "url": "https://github.com/serverless/forms-service/blob/d260e45c75389f4a09524d518d4dd43e53a15375/backend/lib/auth.js",
              "children": [
                {
                  "text": "auth0 authorizer"
                }
              ]
            },
            {
              "text": " was one of the first I worked with."
            }
          ]
        }
      ]
    }
  ]
}
